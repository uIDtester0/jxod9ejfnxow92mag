import os
import asyncio
import libtorrent as lt
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7471696949:AAGP6xmotd0RPRhgI2j1x_0AaZHHUmQlbEI"
DOWNLOADS_DIR = "downloads"
WORMHOLE_API = "https://wormhole.app/api/v1"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –ø–æ magnet-—Å—Å—ã–ª–∫–µ
async def download_torrent(magnet_link: str):
    ses = lt.session()
    params = {
        "save_path": DOWNLOADS_DIR,
        "storage_mode": lt.storage_mode_t.storage_mode_sparse,
    }
    
    handle = lt.add_magnet_uri(ses, magnet_link, params)
    ses.start_dht()

    # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    while not handle.has_metadata():
        await asyncio.sleep(1)
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    while handle.status().state != lt.torrent_status.seeding:
        status = handle.status()
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {status.progress * 100:.1f}%")
        await asyncio.sleep(5)
    
    return os.path.join(DOWNLOADS_DIR, handle.name())

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Wormhole.app
def upload_to_wormhole(file_path: str):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ "—á–µ—Ä–≤—è–∫–∞" (–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
        response = requests.post(
            f"{WORMHOLE_API}/worms",
            json={"ttl": 86400}  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ñ–∞–π–ª–∞: 24 —á–∞—Å–∞
        )
        worm_id = response.json()["id"]

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        with open(file_path, "rb") as f:
            requests.put(
                f"{WORMHOLE_API}/worms/{worm_id}/file",
                files={"file": f}
            )

        return f"https://wormhole.app/{worm_id}#"

    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ magnet-—Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")

@dp.message_handler(lambda msg: msg.text.startswith("magnet:"))
async def process_magnet(message: types.Message):
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        file_path = await download_torrent(message.text)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Wormhole
        await message.answer("üöÄ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ Wormhole.app...")
        download_url = upload_to_wormhole(file_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏
        await message.answer(f"‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤! –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n{download_url}")

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(file_path)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if "file_path" in locals():
            os.remove(file_path)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    if not os.path.exists(DOWNLOADS_DIR):
        os.makedirs(DOWNLOADS_DIR)
    
    executor.start_polling(dp, skip_updates=True)